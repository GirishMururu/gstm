#include "mcmc.h"
#include "uthash.h"
//############################################################
//
// MCMC: Markov Chain Monte Carlo
//         
//	all mcmc functions needed to develop the markov model
//#############################################################

//#define debug

#define ticktock
//#define throughput
	#define TWINDOW 100
//#define mcmcdata
//#define modelusage
//#define monitor_ND
//#define allowsingle
//	#define WAITING
  #define breakloop
  #define ALL_MATCH
   #define high
	#define FREQ 2 
#define SAME_RETRIES 3 
#define MAX_RANKS 7 

#ifdef debug
#define Debug printf
#define Debug2 printf
//#define Debug2(x,y) //nothing 
#else
#define Debug(x) //nothing
#define Debug2(x,y) //nothing 
#endif


#define BUF_SIZE 100000
#define STATE_SIZE 20 
// structures of transition matrix
char strbuff[BUF_SIZE] = {'\0'};
int i = 0, ist = 0;
int numthreads = 0;
pthread_mutex_t mclock;
#ifdef ticktock
pthread_mutex_t timelock;
char timebuff[BUF_SIZE*10][20] = {{'\0'}};
double *tstart =NULL;
int *cycle =NULL;
int ti = 0;
#endif
#ifdef throughput
int *tput = NULL;
double *tlasttime =NULL;
#endif
#ifdef modelusage

char curstate[STATE_SIZE] ={'\0'},transstate[STATE_SIZE] = {'\0'};

void buildstates();
void freestates();
#endif

//#################################
//Get time
//#################################
double mcmc_gettime()
{
        struct timespec tv = {0};
        FILE *fp = NULL;
        if(clock_gettime(CLOCK_REALTIME,&tv) != 0){
                 fp = fopen("trialresults.txt","a+");
                 fprintf(fp,"Che timer error\n");
                 fclose(fp);
                 return 0;
        }
        return (((double) tv.tv_sec) +(double)(tv.tv_nsec/1.0e9));
}
//###############################
// mcmc_start: init mclock
//###############################
void mcmc_start(int nthreads)
{
        if(pthread_mutex_init(&mclock,NULL) != 0){
                printf("\n mutex init failed in mcmc_start\n");
               	exit(1);
        }
	Debug("In start\n"); fflush(stdout);
#ifdef modelusage
	buildstates();
#endif
#ifdef ticktock
        if(pthread_mutex_init(&timelock,NULL) != 0){
                printf("\n mutex init failed in mcmc_start\n");
               	exit(1);
        }
	tstart = (double*)malloc(sizeof(double)*nthreads);
	cycle = (int*)malloc(sizeof(int)*nthreads);
	memset(tstart,0,sizeof(double)*nthreads);
	memset(cycle,0,sizeof(int)*nthreads);
#endif	
#ifdef throughput
	tput = (int*)malloc(sizeof(int)*nthreads);
	tlasttime= (double*)malloc(sizeof(double)*nthreads);
	memset(tlasttime,0,sizeof(double)*nthreads);
	memset(tput,0,sizeof(int)*nthreads);
	int index = 0;
	for(; index< nthreads; index++)
	 tlasttime[index] = mcmc_gettime();
#endif
}
//#####################################
// mcmc_stop: dump the buffer 
//#####################################
void mcmc_stop()
{
	Debug("In stop\n"); fflush(stdout);
#ifdef modelusage
	freestates();
#ifdef monitor_ND
	FILE *fp = NULL;
	fp = fopen("mcmc_monitor_ND","a+");
	strbuff[i++] = '\n';
	if(fp == NULL){
		fprintf(stderr,"Error opening mcmc_monitor_ND file");
	}
	fwrite(strbuff,i-1,1,fp);
	fclose(fp);
#endif
#else
#ifdef mcmcdata
	FILE *fp = NULL;
	fp = fopen("mcmc_data","a+");
	strbuff[i++] = '\n';
	if(fp == NULL){
		fprintf(stderr,"Error opening mcmc_data file");
	}
	fwrite(strbuff,i-1,1,fp);
	fclose(fp);
#endif

#endif
#ifdef ticktock
	FILE *fp =NULL;
	fp = fopen("timeanalysis","a+");
	if(fp == NULL){
		fprintf(stderr, "could not open timeanalysis");
		free(tstart);
		free(cycle);
		return;
	}
	int k = 0;
	for(k = 0; k <= ti; k++)
	fprintf(fp,"%s",timebuff[k]);
	memset(timebuff,'\0',sizeof(timebuff));
	fclose(fp);
	free(tstart);
	free(cycle);
#endif
#ifdef throughput
	free(tput);
	free(tlasttime);
#endif
}

//######################################################
// mcmc_throughput : anlaysis of throughtput per thread
//######################################################
void mcmc_throughput(int tid)
{
#ifdef throughput
	tput[tid]++;
	if((mcmc_gettime() - tlasttime[tid])*1000 > TWINDOW)
	{
		char filename[10] = {'\0'};
		sprintf(filename,"tput_%d",tid);
		FILE *fp = NULL;
		fp= fopen(filename,"a+");
		if(fp == NULL)
		{
			 fprintf(stderr,"could not open file %s",filename);
			 return ;
		}
		fprintf(fp,"%d,",tput[tid]);
		fclose(fp);
		tput[tid] = 0;
		tlasttime[tid] = mcmc_gettime();
	}
#endif
}
	
//################################################
// mcmc_timeanalyse : anlaysis of time per thread
//################################################
void mcmc_timeanalyse(int tid, int start)
{
#ifdef ticktock	
 	if(start){
		if(!cycle[tid]){
			tstart[tid] = mcmc_gettime();
			cycle[tid] = 1;
		}
	}else{//stop
		pthread_mutex_lock(&timelock);
		sprintf(timebuff[ti],"%d,%f;",tid,(mcmc_gettime()-tstart[tid]));
		ti++;
		if(ti >= BUF_SIZE){
			FILE *fp;
			fp = fopen("timeanalysis","a+");
			if(fp == NULL){
				fprintf(stderr, "could not open timeanalysis");
				pthread_mutex_unlock(&timelock);
				cycle[tid] = 0;
				return;
			}
			int k = 0;
			for(k = 0; k <= ti; k++)
			fprintf(fp,"%s",timebuff[k]);
			memset(timebuff,'\0',sizeof(timebuff));
			fclose(fp);
			ti = 0;
		}
		pthread_mutex_unlock(&timelock);
		cycle[tid] = 0;	
	}
#endif
}
//##############################################
// mcmc_commit : append commit order to strbuff
//##############################################
void mcmc_commit(int tid)
{
	//char buffer[2];
	pthread_mutex_lock(&mclock);
	//strbuff[i++] = ';';
	//itoa(tid,&strbuff[i++],10);//Not enabling more than 8 threads for now, change when more threads are enabled
#ifdef modelusage
	//sprintf(&transstate[ist++],"%d",tid);
	transstate[ist++] = (char)(((int)'0')+tid);
	Debug2("\n Commit transstate = %s", transstate);
	memset(curstate,'\0',sizeof(curstate));
//	if(strlen(transstate) < STATE_SIZE - 1)
	strncpy(curstate,transstate,strlen(transstate));
	memset(transstate,'\0',sizeof(transstate));
	ist = 0;
#ifdef monitor_ND
	sprintf(&strbuff[i++],"%d",tid);
	strbuff[i++] = ';';
	if(i+1 >= BUF_SIZE){//check if the buff has space for next writes
		FILE *fp = NULL;
		fp = fopen("mcmc_monitor_ND","a+");
		if(fp == NULL){
			fprintf(stderr,"Error opening mcmc_monitor_ND file");
		}
		fwrite(strbuff,i,1,fp);
		memset(strbuff,'\0',BUF_SIZE);
		fclose(fp);
		i = 0;
	}
#endif
#else
	sprintf(&strbuff[i++],"%d",tid);
	strbuff[i++] = ';';
	if(i+1 >= BUF_SIZE){//check if the buff has space for next writes
		FILE *fp = NULL;
		fp = fopen("mcmc_data","a+");
		if(fp == NULL){
			fprintf(stderr,"Error opening mcmc_data file");
		}
		fwrite(strbuff,i,1,fp);
		memset(strbuff,'\0',BUF_SIZE);
		fclose(fp);
		i = 0;
	}
#endif
	pthread_mutex_unlock(&mclock);
}
//#############################################
//mcmc_abort: append the concurrent threads 
//#############################################
void mcmc_abort(int tid)
{

	pthread_mutex_lock(&mclock);
	//itoa(tid,&strbuff[i++],10);//Not enabling more than 8 threads for now, change when more threads are enabled
	//strbuff[i++] = ',';
#ifdef modelusage
	//sprintf(&transstate[ist],"%d,",tid);
	transstate[ist++] = (char)(((int)'0')+tid);
	transstate[ist++] = ',';
	if(ist > STATE_SIZE-3){
		memset(transstate,'\0',sizeof(transstate));
		ist = 0;
	}
	Debug2("\nAbort transstate = %s", transstate);
#ifdef monitor_ND
	sprintf(&strbuff[i++],"%d",tid);
	strbuff[i++] = ',';
	if(i+1 >= BUF_SIZE){//check if it fills for next two writes
		FILE *fp = NULL;
		fp = fopen("mcmc_monitor_ND","a+");
		if(fp == NULL){
			fprintf(stderr,"Error opening mcmc_monitor_ND file");
		}
		fwrite(strbuff,i,1,fp);
		memset(strbuff,'\0',BUF_SIZE);
		fclose(fp);
		i = 0;
	}
#endif
#else
	sprintf(&strbuff[i++],"%d",tid);
	strbuff[i++] = ',';
	if(i+1 >= BUF_SIZE){//check if it fills for next two writes
		FILE *fp = NULL;
		fp = fopen("mcmc_data","a+");
		if(fp == NULL){
			fprintf(stderr,"Error opening mcmc_data file");
		}
		fwrite(strbuff,i,1,fp);
		memset(strbuff,'\0',BUF_SIZE);
		fclose(fp);
		i = 0;
	}
#endif
	pthread_mutex_unlock(&mclock);
}

#ifndef modelusage
void mcmc_determine(int tid){}//nothing
#endif
////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Usage of model generated
//
/////////////////////////////////////////////////////////////////////////////////////////////////////


#ifdef modelusage
typedef struct _trans_state{
        char  state_name[STATE_SIZE];
        int rank;
        struct _trans_state *next;
}trans_state;

typedef struct _state{
        char state_name[STATE_SIZE];
        trans_state *roottstate;//Linked list of next possible states
	trans_state *lasttstate;
	#ifdef UTHASH_H
	UT_hash_handle hh;
	#endif
}state;

#ifdef UTHASH_H
struct _state *hash_states = NULL;
#endif
state *fata = NULL;
int nstates = 0;


int getnumlines(char *filename)
{
	int ch;
	FILE *fp = fopen(filename,"r");
	if(fp ==NULL){
		fprintf(stderr,"Could not open file to get number of lines");
		exit(1);
	}
	int lcount = 0;
	while((ch = fgetc(fp)) != EOF)
	{	
		if(ch == '\n')
		    lcount++;	
	}
	fclose(fp);
	return lcount;
}

state * find_cur_state(char *cstate)
{
	state * stRet = NULL;
#ifdef UTHASH_H
	HASH_FIND_STR(hash_states, cstate, stRet);
#else
	int in = 0;
	while(in < nstates)
	{
		if(strcmp(fata[in].state_name,cstate) == 0){
			stRet = &fata[in];
			break;
		}
		in++;
	}
#endif
	return stRet;
}

//###################################################
//mcmc_determine: make threads less non-determinstic 
//###################################################
void mcmc_determine(int tid)	
{
#ifdef allowsingle
#ifdef WAITING
	int wait = 30;
	while(1)
	{
		char cstate[STATE_SIZE]={'\0'};
		pthread_mutex_lock(&mclock);
		strncpy(cstate,curstate,strlen(curstate));
		pthread_mutex_unlock(&mclock);
		state *currst = find_cur_state(cstate);
		if(currst == NULL)//can be the initial case
			break;
		trans_state *nttstate = currst->roottstate;
		char tstate[STATE_SIZE]={'\0'} ;
		strncpy(tstate,nttstate->state_name,strlen(nttstate->state_name));
		char *pch = NULL;
		char *tmp;
		int commitstate =-1;
		pch = strtok_r(tstate,",",&tmp);
		while(pch != NULL)
		{
			commitstate =atoi(pch);
			pch = strtok_r(NULL,",",&tmp);
		}
		if(commitstate == tid || wait  == 0){
			//if( wait == 0) printf("\n Expired hold");
			//else printf("\n found states");
			break;
		}
		wait--;
	}
#else

	char prevstate[STATE_SIZE]={'\0'};
        int prevsame = 0;
        while(1)
        {
                char cstate[STATE_SIZE]={'\0'};
                pthread_mutex_lock(&mclock);
                strncpy(cstate,curstate,strlen(curstate));
                pthread_mutex_unlock(&mclock);
		#ifdef breakloop
                if(strcmp(cstate,prevstate)==0){
                        prevsame++;
                        if(prevsame > SAME_RETRIES)
                          break;
                }else{
                        memset(prevstate,'\0',sizeof(prevstate));
                        strncpy(prevstate,cstate,strlen(cstate));
                         prevsame = 0;
                }
		#endif
                state *currst = find_cur_state(cstate);
                if(currst == NULL)//can be the initial case
                        break;
                trans_state *nttstate = currst->roottstate;
                int found = 0;
                {
                        char tstate[STATE_SIZE] ={'\0'} ;
                        strncpy(tstate,nttstate->state_name,strlen(nttstate->state_name));
                        char *pch = NULL;
			char *tmp;
                        int nextstate =-1;
                        pch = strtok_r(tstate,",",&tmp);
                        while(pch != NULL)
                        {
                                nextstate =atoi(pch);
				#ifdef ALL_MATCH
                                if(nextstate == tid){
                                        found = 1;
                                        break;  
                                }
				#endif
                                pch = strtok_r(NULL,",",&tmp);
                        }
                        if(nextstate == tid){
                                found = 1;
                        }
                        if(found)
                          break;
                }

        }
#endif
#else
	Debug("Start determine\n");
	char prevstate[STATE_SIZE]={'\0'};
	int prevsame = 0;
	while(1)
	{
		char cstate[STATE_SIZE] ={'\0'};
		pthread_mutex_lock(&mclock);
		strncpy(cstate,curstate,strlen(curstate));
		pthread_mutex_unlock(&mclock);
		
		#ifdef breakloop
		if(strncmp(cstate,prevstate,strlen(cstate))==0){
			prevsame++;
			if(prevsame > SAME_RETRIES)
			  break;
			continue;
		}else{	
			memset(prevstate,'\0',sizeof(prevstate));
			strncpy(prevstate,cstate,strlen(cstate));
			 prevsame = 0;
		}
		#endif
		state *currst = find_cur_state(cstate);
		if(currst == NULL)//can be the initial case
			break;
		trans_state *nttstate = currst->roottstate;
		int try = 0;
		int found = 0;
		int highest = 0;
		while((nttstate != NULL) && try < MAX_RANKS)
		{	
			#ifdef high	
			if (try != 0){
				int cmp = highest/FREQ;
				if(nttstate->rank < cmp)
				  break;
			}	
			else
				highest = nttstate->rank;
			#endif
			char tstate[STATE_SIZE] = {'\0'};
//			if(strlen(nttstate->state_name) < STATE_SIZE -1)
			strncpy(tstate,nttstate->state_name,strlen(nttstate->state_name));
			char *pch =NULL;
			char *tmp = NULL;
			int nextstate =-1;
			pch = strtok_r(tstate,",",&tmp);
			while(pch != NULL)
			{
				nextstate =atoi(pch);
				#ifdef ALL_MATCH
				if(nextstate == tid){
					found = 1;
					break;	
				}
				#endif
				pch = strtok_r(NULL,",",&tmp);
			}
			if(nextstate == tid){
				found = 1;	
			}
			if(found) 
			  break;
			nttstate = nttstate->next;
			try++;
		}

		if(found) 
		  break;
	}
	Debug("stop determine");
			
#endif
}
	
void buildstates()
{
        FILE *fp;
        char *line =NULL;
        size_t len = 0;
        ssize_t read;
        
	int numlines =getnumlines("state_data");//number of states
        fp = fopen("state_data","r");
        if(fp == NULL){
                fprintf(stderr,"File state_data could not be opened");
                exit(1);
        }
	fata = (state*)malloc(sizeof(state)*numlines);
	memset(fata,0,sizeof(state)*numlines);
	int st = 0;	
        while((read = getline(&line, &len, fp)) != -1)
        {
		char *pch= NULL;
		pch = strtok(line,"-");
		if(strlen(pch) >= STATE_SIZE-1)
			continue;
		strncpy(fata[st].state_name,pch,strlen(pch));
		fata[st].roottstate = fata[st].lasttstate = NULL;
		#ifdef UTHASH_H
		HASH_ADD_STR(hash_states,state_name,(&fata[st]));
		#endif
		Debug2("\n%s",pch);
		int i = 0;
		int rank = 0;
		while(pch != NULL)
		{
			if(i != 0){
				if(i%2 == 1){
					trans_state *tmp = (trans_state*)malloc(sizeof(trans_state));
					strncpy(tmp->state_name,pch,strlen(pch));	
					if(fata[st].roottstate == NULL){
						fata[st].roottstate = tmp;
						fata[st].lasttstate= tmp;
					}else{
						fata[st].lasttstate->next = tmp;
						fata[st].lasttstate = tmp;
						
					}
					Debug2("\tstate= %s",pch);
				}
				else{
					fata[st].lasttstate->rank = atoi(pch);//rank++;
					fata[st].lasttstate->next = NULL;					
				 	Debug2("-%s\n",pch);
				}
			}
			int valid_next = 1;
			do{
				pch=strtok(NULL," -:");
				if(pch != NULL && strlen(pch) >= STATE_SIZE-1){
					valid_next = 0;
					pch = strtok(NULL," -:");//get the frequency out only look for states
				}else
					valid_next = 1;
			}while(!valid_next && pch != NULL);
			i++;
		}
		st++;
	}
	nstates = st;
	fclose(fp);
	Debug("\n states built");fflush(stdout);
}
void printstates()
{
	int i =0;
	while(i <nstates)
	{
		printf("\n%s",fata[i].state_name);
		trans_state *tmp = fata[i].roottstate;
		while(tmp != NULL)
		{
			printf("\t %s:%d",tmp->state_name,tmp->rank);
			tmp = tmp->next;
		}
		i++;
	}
}
	
void freestates()
{
	Debug("\n In free");fflush(stdout);
#ifdef UTHASH_H
	state *s,*tmp = NULL;
	HASH_ITER(hh,hash_states,s,tmp){
		HASH_DEL(hash_states,s);
	}
#endif
	int in = 0;
	while(in<nstates)
	{
		trans_state *tmp = fata[in].roottstate;
		while(tmp != NULL)
		{	
			trans_state *prev = tmp;
			tmp = tmp->next;
			Debug2("%d,",in);
			free(prev);
		}
		in++;
	}
	free(fata);
}
#endif
/*int main()
{

	build_states();
	printstates();
	freestates();
	return 0;
}*/
